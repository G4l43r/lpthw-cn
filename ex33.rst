Exercise 33: While Loops
************************

Now to totally blow your mind with a new loop, the ``while-loop``.  What
this kind of loop does is as long as a boolean expression is ``True`` it will
keep executing the code block under it...

Wait, you've been keeping up with the terminology right?  That if we write a 
line and end it with a ``:`` (colon) then that tells Python to start a new 
block of code?  Then we indent and that's the new code.  This is all about
structuring your programs so that Python knows what you mean.  If you don't
get that idea then go back and do some more work with ``if-statements``, 
functions, and the ``for-loop`` until you get it.

Later on we'll have some exercises that will train your brain to read these
structures, similar to how we burned boolean expressions into your brain.

Back to ``while-loops``, what they do is simply do a test like an ``if-statement``,
but instead of running the code block *once* it jumps from back to the "top" where
the ``while`` is, and does the check again.  Then it keeps doing this loop until
the expression is ``False``.

Here's the problem with ``while-loops``: Sometimes they just don't stop.  They're
great if that's your intention, to just keep looping processing things until the 
end of the universe.  If you want to stop though, then you can cause problems.
To avoid these problems, there's some rules to follow:

1. Make sure that you use ``while-loops`` sparingly.  Usually a ``for-loop`` is
   better.
2. Review your while statements and make sure that the thing you're testing will
   become ``False`` at some point later.
3. When is doubt, print out your test variable at the top and bottom of the ``while-loop``
   to see what it's doing.

In this exercise, you'll learn the ``while-loop`` by doing the above three things:

.. literalinclude:: ex/ex33.py
    :linenos:


What You Should See
===================

.. literalinclude:: ex/ex33.txt


Extra Credit
============

1. Take this while loop, and convert it to a function that you can call and
   replace ``10`` in the test (``i < 10``) with a variable.
2. Now use this function to rewrite the script to try different numbers.
3. Add another variable to the function arguments that you can pass in that
   let's you change the ``+ 1`` on line 8 so you can change how much it 
   increments by.
4. Rewrite the script again to use this function to see what effect that has.
5. Now, write it to use ``for-loops`` and ``range`` instead.  Do you need the incrementor in the middle anymore?  What happens if you don't get rid of it?

If at any time that you're doing this it goes crazy (it probably will) just
hold down ``CTRL`` and hit ``c`` (CTRL-c) and the program will abort.

