Reading Files
*************

Everything about ``raw_input`` and ``argv`` has been so you can start
reading files.  This exercise will probably be the one you have to play
with the most to understand what's going on, so do it carefully and remember
your checks.  Working with files is one way to very quickly erase your
work if you're not careful.

First, this exercise involves writing two files.  One is your usual ``ex15.py``
file that you'll run, but the *other* is named ``ex15_sample.txt``.  This second
file isn't a script, but just a plain text file we'll be reading in our script.
Here's the contents of that file:

.. literalinclude:: ex/ex15_sample.txt

What we want to do is "open" that file in our script and print it out.  However,
we don't want to just "hard code" the name ``ex15_sample.txt`` into our script.
The term "hard coding" means that we've put some bit of information that should
come from the user as a string right in our program.  That's bad because we want
it to load other files later.  The solution is to use ``argv`` and ``raw_input``
to ask the user what file they want instead of "hard coding" the file's name.

.. literalinclude:: ex/ex15.py
    :linenos:

There's a few fancy things going on in this file, so let's break it down real
quick:

Line 1-3 should be familiar use of ``argv`` to get a filename.  Next we have line
5 where we use a new command ``open``.  Right now, go run ``pydoc open`` and read
the instructions.  Notice how like your own scripts and ``raw_input`` it takes a
parameter and returns a value you can set to your own variable.  You just opened
a file.

Line 7 we print a little line, but on line 8 we have something very new and
exciting.  We call a function on ``txt``.  You see, what you got back from
open is a ``file`` and it's also got commands you can give it.  You give a
file a command by using the ``.`` (dot or period), the name of the command,
and and parameters.  Just like with ``open`` and ``raw_input``.  The difference
is that when you say ``txt.read()`` you're saying, "Hey txt! Do your read command
with no parameters!"

The remainder of the file is more of the same, but we'll leave the analysis
to you in the extra credit.


What You Should See
===================

.. literalinclude:: ex/ex15.txt

Extra Credit
============

This is a big jump so you want to make sure you do this extra credit as
best you can before moving on.

1. Above each line write out in English what that line does. 
2. If you're not sure ask someone for help or search online.
   Many times searching for "python THING" will find answers
   for what THING does in python.  Try searching for "python open".
3. I used the name "commands" here, but they're also called "functions"
   and "methods".  Search around online to see what other people do
   to define these.  Don't worry if they confuse you, it's normal for
   a programmer to confuse you with their vast extensive knowledge.
4. Get rid of the part from line 10-16 where you use ``raw_input`` and
   try the script then.
5. Use only ``raw_input`` and try the script that way.  Think of why one
   way of getting the filename would be better than another.
6. Run ``pydoc file`` and scroll down until you see the ``read()`` command
   (method/function).  See all the other ones you can use?  Skip the
   ones that have ``__`` (two underscores) in front because those are junk.
   Try some of the other commands.
7. Startup ``python`` again and use ``open`` from the prompt.  Notice
   how you can open files and call ``read`` on them right there?
8. Have your script also do a ``close()`` on the ``txt`` and ``txt_again``
   variables.  It's important to close files when you're done with them.

