习题 45: Is-A, Has-A, Objects, and Classes
*********************************************

有一个重要的概念你需要弄明白，那就是 ``Class`` （类）和 ``Object`` （物件）的区别。
问题在于，class 和 object 并没有真正的不同。它们其实是同样的东西，只是在不同的时间
名字不同罢了。我用禅语来解释一下吧：

``鱼和泥鳅有什么区别？``

这个问题有没有让你有点晕呢？说真的，坐下来想一分钟。我的意思是说，鱼和泥鳅是不一样，
不过它们其实也是一样的是不是？泥鳅是鱼的一种，所以说没什么不同，不过泥鳅又有些特别，
它和别的种类的鱼的确不一样，比如泥鳅和黄鳝就不一样。所以泥鳅和鱼既相同又不同。
怪了。

这个问题让人晕的原因是大部分人不会这样去思考问题，其实每个人都懂这一点，你无须去思考
鱼和泥鳅的区别，因为你知道它们之间的关系。你知道泥鳅是鱼的一种，而且鱼还有别的种类，
根本就没必要去思考这类问题。

让我们更进一步，假设你有一只水桶，里边有三条泥鳅。假设你的好人卡多到没地方用，于是
你给它们分别取名叫小方，小斌，小星。现在想想这个问题：

``小方和泥鳅有什么区别？``

这个问题一样的奇怪，但比起鱼和泥鳅的问题来还好点。你知道小方是一条泥鳅，所以他并没什么
不同，他只是泥鳅的一个特例。小斌和小星一样也是泥鳅的实例(instance)。我的意思是说，它们
是由泥鳅创建出来的，而且代表着和泥鳅一样的属性。

所以我们的思维方式是（你可能会有点不习惯）：鱼是一个“类”(``class``)，泥鳅是一个“类”(``class``)，
而小方是一个“对象”(``object``)。仔细想想，然后我再一点一点慢慢解释给你。

鱼是一个“类”，表示它不是一个真正的东西，而是一个用来描述具有同类属性的实例的概括性词汇。
你有鳍？你有鳔？你住在水里？好吧那你就是一条鱼。

后来河蟹养殖专家路过，看到你的水桶，于是告诉你：“小伙子，你这些鱼是泥鳅。”专家的这话
一出，就澄清了真相，并且定义了一个新的叫做“泥鳅”的“类”，而这个“类”又有它特定的属性。
细长条？长胡须？爱钻泥巴？味道还可以？那你就是一条泥鳅。

最后家庭煮父过来了，他跟河蟹专家说：“非也非也，你看到的是泥鳅，我看到的是小方，而且
我要把小方和剁椒配一起做一道小菜。”于是你就有了一只叫做小方的泥鳅的“实例(instance)”
（泥鳅也是鱼的一个“实例”），并且你使用了它（把它塞到你的胃里了），这样它就是一个
“对象(object)”。

这会你应该了解了：小方是泥鳅的成员，而泥鳅又是鱼的成员。这里的关系式：对象属于某个类，
而某个类又属于另一个类。

写成代码是什么样子
----------------------

This is a weird concept, but to be very honest you only have to worry about it
when you make new classes, and when you use a class.  I will show you two
tricks to help you figure out whether something is a ``Class`` or
``Object``.

First, you need to learn two catch phrases "is-a" and "has-a".  You use the
phrase is-a when you talk about objects and classes being related to each other
by a class relationship.  You use has-a when you talk about objects and classes
that are related only because they *reference* each other.

Now, go through this piece of code and replace each ``##??`` comment with a
replacement comment that says whether the next line represents an ``is-a`` or a
``has-a`` relationship, and what that relationship is.  In the beginning of the
code, I've laid out a few examples, so you just have to write the remaining
ones.

Remember, is-a is the relationship between Fish and Salmon, while has-a is the
relationship between Salmon and Gills.


.. literalinclude:: ex/ex45.py
    :linenos:


About class Name(object)
========================

Remember how I was yelling at you to always use ``class Name(object)`` and I couldn't
tell you why?  Now I can tell you, because you just learned about the difference between
a ``class`` and an ``object``.  I couldn't tell you until now because you would have
just been confused and couldn't learn to use the technology.

What happened is Python's original rendition of ``class`` was broken in many serious
ways.  By the time they admitted the fault it was too late, and they had to support 
it.  In order to fix the problem, they needed some "new class" style so that the
"old classes" would keep working but you could use the new more correct version.

This is where "class is-a object" comes in.  They decided that they would use the
word "object", lowercased, to be the "class" that you inherit from to make a class.
Confusing right?  A class inherits from the class named object to make a class but
it's not an object really it's a class, but do not forget to inherit from object.

Exactly. The choice of one single word meant that I couldn't teach you about this
until now.  Now you can try to understand the concept of a class that is an
object if you like.

However, I would suggest you do not.  Just completely ignore the idea of old style
vs. new style classes and assume that Python always requires (object) when you
make a class.  Save your brain power for something important.


Extra Credit
============


1. Research why Python added this strange ``object`` class, and what that means.
2. Is it possible to use a ``Class`` like it's an ``Object``?
3. Fill out the animals, fish, and people in this exercise with functions that make
   them do things.  See what happens when functions are in a "base class" like Animal
   vs. in say Dog.
4. Find other people's code and work out all the is-a and has-a relationships.
5. Make some new relationships that are lists and dicts so you can also have "has-many"
   relationships.
6. Do you think there's a such thing as a "is-many" relationship?  Read about "multiple
   inheritance", then avoid it if you can.


