Exercise 49: Making Sentences
*****************************

What we should be able to get from our little game lexicon scanner is a list that
looks like this:

.. code-block:: pycon

    >>> from ex48 import lexicon
    >>> print lexicon.scan("go north")
    [('verb', 'go'), ('direction', 'north')]
    >>> print lexicon.scan("kill the princess")
    [('verb', 'kill'), ('stop', 'the'), ('noun', 'princess')]
    >>> print lexicon.scan("eat the bear")
    [('verb', 'eat'), ('stop', 'the'), ('noun', 'bear')]
    >>> print lexicon.scan("open the door and smack the bear in the nose")
    [('error', 'open'), ('stop', 'the'), ('noun', 'door'), ('error', 'and'),
    ('error', 'smack'), ('stop', 'the'), ('noun', 'bear'), ('stop', 'in'),
    ('stop', 'the'), ('error', 'nose')]
    >>> 

What we need to do now is turn this into something the game can work with, which
would be some kind of Sentence class.

If you remember your grade school, a sentence can be a simple structure like:

    Subject Verb Object

It obviously gets more complex than that, and you probably did many days of annoying
sentence graphs for English class.  What we want is to turn the above lists of
tuples into a nice Sentence object that has subject, verb, and object in it.

Match And Peek
==============

To do this we need four tools:

1. A way to loop through the list of tuples.  That's easy.
2. A way to "match" different types of tuples that we expect in our Subject Verb Object setup.
3. A way to "peek" at a potential tuple so we can make some decisions.
4. A way to "skip" things we really do not care about, like stop words.

We use the peek function to say look at the next element in our tuple list, and then
match to take one off and work with it.  Let's take a look at a first peek function:

.. code-block:: python

    def peek(word_list):
        if word_list:
            word = word_list[0]
            return word[0]
        else:
            return None
        
Very easy.  Now for the match function:

.. code-block:: python

    def match(word_list, expecting):
        if word_list:
            word = word_list.pop(0)

            if word[0] == expecting:
                return word
            else:
                return None
        else:
            return None

Again, very easy, and finally our skip function:

.. code-block:: python

    def skip(word_list, word_type):
        while peek(word_list) == word_type:
            match(word_list, word_type)

By now you should be able to figure out what these do, but make sure you understand them.


The Sentence Grammar
====================

With our tools we can now begin to build Sentence objects from our list of tuples.
What we do is a process of:

1. Identify the next word with ``peek``.
2. If that word fits in our grammar, then we call a function to handle that part 
   of the grammar, say ``parse_subject``.
3. If it doesn't, then we ``raise`` an error, which you will learn about in this lesson.
4. When we're all done, we should have a Sentence object to work with in our game.

The best way to demonstrate this is to just give you the code to read, but here's where
this exercise is different from the previous one:  \emph{You will write the test for the
parser code I give you.}  Rather than giving you the test so you can write the code,
I give you the code, and you have to write the test.

Here's the code that I wrote for parsing simple sentences using the ``ex48.lexicon``
module:

.. literalinclude:: ex/ex49.py

A Word On Exceptions
====================

You briefly learned about exceptions, but maybe not how to raise them.  This code
demonstrates how to do that with the ``ParserException`` at the top.  Notice that
it uses classes like you learned to give it the type of ``Exception``.  Also notice
the use of ``raise`` keyword to actually raise the exception.

In your tests, you will want to work with these exceptions, which I'll show you how 
to do.


What You Should Test
====================

What you should do for Ex 49 is write a complete test that confirms everything
in this code is working.  That includes making exceptions happen by giving it
bad sentences.

You can check for an exception by using the function ``assert_raises`` from the
nose documentation.  Learn how to use this so you can write a test that is
\emph{expected} to fail, which is very important in testing.  You should learn about
this function (and others) by reading the nose documentation.

When you are done, you should know how this bit of code works very well, and how
to write a test for other people's code even if they do not want you to.  Trust me,
it's a very handy skill to have.

Extra Credit
============

1. Change the ``parse_`` methods and try to put them into a class rather than 
   be just methods.  Which design do you like better?
2. Make the parser more error resistant so that you can avoid annoying your
   users if they type in words your lexicon doesn't understand.
3. Improve the grammar by handling more things like numbers.
4. Think about how you might use this Sentence class in your game to do more fun
   things with a user's input.


