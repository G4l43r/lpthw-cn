Exercise 18: Names, Variables, Code, Functions
**********************************************

Big title right?  I am about to introduce you to *the function*!
Dum dum dah!  Every programmer will go on and on about functions
and all the different ideas about how they work and what they do,
but I will give you the simplest explanation you can use right now.

Functions do three things:

1. They name pieces of code the way variables name strings and numbers.
2. They take arguments the way your scripts take ``argv``.
3. Using #1 and #2 they let you make your own "mini scripts" or "tiny commands".

How you create a function is using the word ``def`` in Python.  I'm going to
have you make four different functions that work like your scripts, and then
show you how each one is related.

.. literalinclude:: ex/ex18.py
    :linenos:

Let's break down the first function, ``print_two`` which is the most similar
to what you already know from making scripts:

1. First we tell Python we want to make a function using ``def`` for "define".
2. Still on the same line as ``def`` we then give the function a name, in this
   case we just called it "print_two" but it could be "peanuts" too.
3. Then we tell it we want ``*args`` (asterisk args) which is a lot like your ``argv`` parameter
   but for functions. This *has* to go inside ``()`` parenthesis to work.
4. Then we end this line with a ``:`` colon, and start indenting.
5. After the colon all the lines that are indented 4 spaces will become attached 
   to this name ``print_two``.  Our first indented line is one that unpacks
   the arguments the same as with your scripts.
6. And to demonstrate how it works we print these arguments out, just like
   we would in a script.

Now, the problem with ``print_two`` is that it's not the easiest way to make
a function.  In Python we can skip the whole unpacking args and just use
the names we want right inside ``()``.  That's what ``print_two_again`` does.

After that you have an example of how you make a function that takes one
argument in ``print_one``.

Finally you have a functiont that has no arguments in ``print_none``.

.. warning::

    This is very important, don't get discouraged right now if this doesn't
    quite make sense.  We're going to do a few exercises linking functions to
    your scripts and show you how to make more.  For now just keep thinking
    "mini script" when I say "function" and keep playing with them.


What You Should See
===================

If you run the above script you should see:

.. literalinclude:: ex/ex18.txt

Right away you can see how a function works.  Notice that we did with
our functions what you have been doing with things like ``exists``, ``open``,
and other "commands".  In fact, I've been tricking you because in Python
those "commands" are just functions.  This means that you can make your
own commands and use them in your scripts too.


Extra Credit
============

You need to write out a ``function checklist`` for later exercises.  Write
these out onto an index card and keep it by you while you complete the rest
of these exercises or until you feel you don't need it:

1. Did you start your function definition with ``def``?
2. Does your function name have only characters and ``_`` (underscore) characters?
3. Did you put an open parenthesis right after the function name?
4. Did you put your arguments after the parenthesis separated by commas?
5. Did you make each argument unique (meaning no duplicated names).
6. Did you indent all lines of code you want in the function 4 spaces?  No more, no less.
7. Did you "end" your function by going back to writing with no indent (dedenting we call it)?

And when you run (aka use, call) a function check these things:

1. Did you call/use this function by typing its name?
2. Did you put ``(`` character after the name to call it?
3. Did you put the values you want into the parenthesis separated by commas?
4. Did you end the function call with a ``)`` character.

You will use these two checklists on the remaining lessons until you don't need
them anymore.
