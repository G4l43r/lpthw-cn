Exercise 21: Functions Can Return Something
*******************************************

You have been using the ``=`` character to name variables and set them
to numbers or strings.  We're now going to blow your mind again by
showing you how to use ``=`` and a new Python word ``return`` to 
set variables to be a *value from a function*.  There will be one
thing to pay close attention to, but first type this in:


.. literalinclude:: ex/ex21.py
    :linenos:

We are now doing our own math functions for ``add``, ``subtract``, ``multiply``,
and ``divide``.  The important thing to notice is the last line where we
say ``return a + b`` (in ``add``).  What this does is the following:

1. Our function is called with two arguments: ``a`` and ``b``.
2. We print out what our function is doing, in this case "ADDING".
3. Then we tell Python to do something kind of backward: we return
   the addition of ``a + b``.  You might say this as, "I add ``a`` and ``b``
   then return them."
4. Python adds the two numbers. Then when the function ends any line
   that runs it will be able to assign this ``a + b`` result to a variable.

As with many other things in this book, you should take this real slow,
break it down and try to trace what's going on.  To help there's extra
credit to get you to solve a puzzle and learn something cool.


What You Should See
===================


.. literalinclude:: ex/ex21.txt


Extra Credit
============

1. If you aren't really sure what ``return`` does, try writing a few of
   your own functions and have them return some values.  You can return
   anything that you can put to the right of an ``=``.
2. At the end of the script is a puzzle.  I'm taking the return value
   of one function, and *using* it as the argument of another function.
   I'm doing this in a chain so that I'm kind of creating a formula using
   the functions.  It looks really weird, but if you run the script you 
   can see the results.  What you should do is try to figure out the
   normal formula that would recreate this same set of operations.
3. Once you have the formula worked out for the puzzle, get in there
   and see what happens when you modify the parts of the functions. 
   Try to change it on purpose to make another value.
4. Finally, do the inverse. Write out a simple formula and use the 
   functions in the same way to calculate it.

This exercise might really whack your brain out, but take it slow and easy and
treat it like a little game.  Figuring out puzzles like this is what makes
programming fun, so I'll be giving you more little problems like this as we go.

