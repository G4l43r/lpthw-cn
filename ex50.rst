习题 50: 你的第一个网站
*******************************

这节以及后面的习题中，你的任务是把前面创建的游戏做成网页版。这是本书的最后三个\
章节，这些内容对你来说难度会相当大，你要在上面花些时间才能做出来。在你开始这节\
练习以前，你必须已经成功地完成过了《习题 46》的内容，正确安装了 ``pip``\，而且\
学会了如何安装软件包以及如何创建项目骨架。如果你不记得这些内容，就回到《习题 46》\
重新复习一遍。


安装 lpthw.web
-----------------

在创建你的第一个网页应用程序之前，你需要安装一个“Web 框架”，它的名字叫 ``lpthw.web``\。\
所谓的“框架”通常是指“让某件事情做起来更容易的软件包”。在网页应用的世界里，人们创建\
了各种各样的“网页框架”，用来解决他们在创建网站时碰到的问题，然后把这些解决方案用\
软件包的方式发布出来，这样你就可以利用它们引导创建你自己的项目了。

可选的框架类型有很多很多，不过在这里我们将使用 ``lpthw.web`` 框架。你可以先学会它，\
等到差不多的时候再去接触其它的框架，不过 ``lpthw.web`` 本身挺不错的，所以就算你一直使用\
也没关系。

使用 ``pip`` 安装 ``lpthw.web``\：

.. code-block:: console

    $ sudo pip install lpthw.web
    [sudo] password for zedshaw: 
    Downloading/unpacking lpthw.web
      Running setup.py egg_info for package lpthw.web
        
    Installing collected packages: lpthw.web
      Running setup.py install for lpthw.web
        
    Successfully installed lpthw.web
    Cleaning up...

以上是 Linux 和 Mac OSX 系统下的安装命令，如果你使用的是 Windows，那你只要把
``sudo`` 去掉就可以了。如果你无法正常安装，请回到《习题 46》，确认自己学会了\
里边的内容。

.. warning::
    
    其他 Python 程序员会警告你说 ``lpthw.web`` 只是另外一个叫做 ``web.py`` 的
    Web 框架的代码分支(fork)，而 ``web.py`` 又包含了太多的“魔法(magic)”在里边。\
    如果他们这么说的话，你告诉他们 Google App Engine 最早用的就是 ``web.py``\，\
    但没有一个 Python 程序员抱怨过它里边包含了太多的魔法，因为 Google 用它也没\
    啥问题。如果 Google 觉得它可以，那它对你来说也不会差。所以还是回去继续学习\
    吧，他们这些说法与其说是教导你，不如说是拿他们自己的教条束缚你，你还是忽略\
    这些说法好了。
    
写一个简单的“Hello World”项目
-----------------------------------

现在你将做一个非常简单的“Hello World”项目出来，首先你要创建一个项目目录：

.. code-block:: console

    $ cd projects
    $ mkdir gothonweb
    $ cd gothonweb
    $ mkdir bin gothonweb tests docs templates
    $ touch gothonweb/__init__.py
    $ touch tests/__init__.py

你最终的目的是把《习题 42》中的游戏做成一个 web 应用，所以你的项目名称叫做
``gothonweb``\，不过在此之前，你需要创建一个最基本的 ``lpthw.web`` 应用，将下面\
的代码放到 ``bin/app.py`` 中：

.. literalinclude:: ex/ex50.py
    :linenos:

然后使用下面的方法来运行这个 web 程序：

.. code-block:: console

    $ python bin/app.py
    http://0.0.0.0:8080/


最后，使用你的网页浏览器，打开 URL ``http://localhost:8080/``\，你应该看到两样\
东西，首先是浏览器里显示了 ``Hello, world!``\，然后是你的命令行终端显示了如下\
的输出：

.. code-block:: console

    $ python bin/app.py
    * Running on http://127.0.0.1:5000/
    * Restarting with reloader...
    127.0.0.1 - - [13/Jun/2011 17:18:03] "GET / HTTP/1.1" 200 -
    127.0.0.1 - - [13/Jun/2011 17:18:03] "GET /favicon.ico HTTP/1.1" 404 -

这些是 ``lpthw.web`` 打印出的 log 信息，从这些信息你可以看出服务器有在运行，而且能\
了解到程序在浏览器背后做了些什么事情。这些信息还有助于你发现程序的问题。例如在\
最后一行它告诉你浏览器试图获取 ``/favicon.ico``\，但是这个文件并不存在，因此它\
返回的状态码是 ``404 Not Found``\。

到这里，我还没有讲到任何 web 相关的工作原理，因为首先你需要完成准备工作，以\
便后面的学习能顺利进行，接下来的两节习题中会有详细的解释。我会要求你用各种方法\
把你的 lpthw.web 应用程序弄坏，然后再将其重新构建起来：这样做的目的是让你明白运行\
``lpthw.web`` 程序需要准备好哪些东西。


发生了什么事情？
------------------

在浏览器访问到你的网页应用程序时，发生了下面一些事情：

1. 浏览器通过网络连接到你自己的电脑，它的名字叫做 ``localhost``\，这是一个标准\
   称谓，表示的谁就是网络中你自己的这台计算机，不管它实际名字是什么，你都可以使用\
   ``localhost`` 来访问。它使用到的网络端口是 ``5000``\。
2. 连接成功以后，浏览器对 ``bin/app.py`` 这个应用程序发出了 HTTP 请求(request)，\
   要求访问 URL ``/``\，这通常是一个网站的第一个 URL。
3. 在 ``bin/app.py`` 里，我们有一个列表，里边包含了 URL 和类的匹配关系。我们这里\
   只定义了一组匹配，那就是 ``'/', 'index'`` 的匹配。它的含义是：如果有人使用浏览\
   器访问 ``/`` 这一级目录，\ ``lpthw.web`` 将找到并加载 ``class index``\，从而\
   用它处理这个浏览器请求。
4. 现在 ``lpthw.web`` 找到了 ``class index``\，然后针对这个类的一个实例调用了
   ``index.GET`` 这个方法函数。该函数运行后返回了一个字符串，以供 ``lpthw.web``
   将其传递给浏览器。
5. 最后 ``lpthw.web`` 完成了对于浏览器请求的处理，将响应(response)回传给浏览器，\
   于是你就看到了现在的页面。

确定你真的弄懂了这些，你需要画一个示意图，来理清信息是如何从浏览器传递到
``lpthw.web``\，再到 ``index.GET``\，再回到你的浏览器的。


修正错误
-------------

第一步，把第 11 行的 ``greeting`` 变量赋值删掉，然后刷新浏览器。你应该会看到一个\
错误页面，你可以通过这一页丰富的错误信息看出你的程序崩溃的原因是什么。当然你已经\
知道出错的原因是 ``greeting`` 的赋值丢失了，不过 ``lpthw.web`` 还是会给你一个挺好\
的错误页面，让你能找到出错的具体位置。试试在这个错误页面上做以下操作：

1. 检查每一段 ``Local vars``（用鼠标点击它们），追踪里边提到的变量名称，\
   以及它们是在哪些代码文件中用到的。
2. 查看
3. 试着把这个小程序的别的位置改错，探索一下会发生什么事情。\``lpthw.web`` 的错误信息\
   在命令行终端也会出现，所以别忘了检查命令行终端。


创建基本的模板文件
----------------------

你已经试过用各种方法把这个 lpthw.web 程序改错，不过你有没有注意到“Hello World”不是\
一个好 HTML 网页呢？这是一个 web 应用，所以需要一个合适的 HTML 响应页面才对。为了\
达到这个目的，下一步你要做的是将“Hello World”以较大的绿色字体显示出来。

第一步是创建一个 ``templates/index.html`` 文件，内容如下：

.. literalinclude:: ex/ex50/gothonweb/templates/index.html
    :linenos:

如果你学过 HTML 的话，这些内容你看上去应该很熟悉。如果你没学过 HTML，那你应该\
去研究一下，试着用 HTML 写几个网页，从而知道它的工作原理。不过我们这里的 HTML
文件其实是一个“模板(template)”，
If you know what HTML is then this should look fairly familiar, if not then you might need to go research
HTML and try writing a few web pages by hand so you know how it works.  This HTML file
however is a *template*, which means that ``lpthw.web`` will fill in "holes" in the text
depending on variables you pass in to the template.  Every place you see ``$greeting`` will be
a variable you'll pass to the template that alters its contents.

To make your ``bin/app.py`` do this, you need to add some code to tell lpthw.web where to
load the template and to render it.  Take that file and change it like this:

.. literalinclude:: ex/ex50/gothonweb/bin/app.py
    :linenos:

Once you have that in place, reload the web page in your browser and you should see a different message
in green.  You should also be able to do a ``View Source`` on the page in your browser to see that it is
valid HTML.

This may have flown by you very fast, so let me explain how a template works:

1. In your ``bin/app.py`` you've added a new import for ``render_template`` which will magically
   figure out that you want templates in ``templates/``.
2. This ``render_template`` function knows how to load ``.html`` files out of the ``templates/`` directory because
   the author wrote it that way. See? Magic! It's awesome.
3. Later in your code, when the browser hits the ``hello`` function like before, instead of just returning
   the string ``greeting``, you call ``render_template`` and pass the greeting to it as a variable.
4. This ``render_template`` function is kind of a *magic* function where it
   sees that you're asking for ``index.html``, goes into the ``templates/``
   directory, looks for a page named ``index.html``, and then "renders" it, or
   converts it.  If figures out where ``templates/`` is based on the ``lpthw.web(".")`` call
   which says, "Run lpthw.web in the current directory."
5. In the ``templates/index.html`` file you see what looks like regular HTML, but then there's
   these ``if``, ``else``, and ``endif`` statements that look nothing like Python.  This is called
   Jinja2 Templates, and they're a different language from Python, but they should be easy for you
   to grasp or at least hack around until you pick it up.  Hopefully you won't be writing too much
   of these statements.
6. Finally, you have the HTML in ``templates/index.html`` that looks at the ``greeting`` variable, and
   if it's there, prints one message using the ``greeting``, or a default message.

To get deeper into this, try changing the greeting variable and the HTML to see what effect it has.
Try also creating another template named ``templates/foo.html`` and render that using ``render_template``
instead of ``index.html`` like before. This will show you how the name of the function you
call on ``render`` is just matched to a ``.html`` file in ``templates/``.


Next Steps: Input, Better Templates, Games
------------------------------------------

You should spend a good week really diving into the http://lpthw.web.pocoo.org
documentation and trying everything you can find there to try.  Rework this
initial project directory to add anything you can think up and explore.  You
should also be learning about HTML5 and CSS3 and trying to get a good
understanding of how to write those kinds of files.  We'll be making a very
pathetic set of HTML5 and CSS3 files in the last two exercises, but for now you
should be exploring and learning.

In Exercises 51 you will reorganize the web application, get some better templates, setup
a little game engine that get input, and lay the foundation for your game.  In Exercise
52 you'll finally put your game together and learn to unit test it so that you can work
faster and make sure it keeps working.


