Exercise 13: Parameters, Unpacking, Variables
*********************************************

We're slowly building up your first few input operations, so we want to
cover one more input method you can use to pass variables to a script
(script being another name for you ``.py`` files).  You know how you
type ``python ex13.py`` to run the ``ex13.py`` file?  Well the ``ex13.py``
part of the command is called a "parameter".  What we'll
do now is write a script that also accepts parameters.

Go ahead and type this program and then I'll explain it in detail:

.. literalinclude:: ex/ex13.py
    :linenos:

On line 1 we have what's called an "import".  This is how you add
features to your script from the Python feature set.  Rather than
give you all the features at once, Python asks you to say what 
you plan to use.  This keeps your programs small, but it also acts
as documentation for other programmers who read your code later.

The ``argv`` is the "argument variable" and it's actually a very
standard name in programming.  You'll find it used in many other 
languages.  What this variable does is *hold* the parameters you pass
to your Python script when you run it.  In the exercises you'll
get to play with this more and see what happens.

Line 3 "unpacks" ``argv`` so that, rather than holding all the parameters, it
gets assigned to four variables you can work with: ``script``, ``first``,
``second``, and ``third``.  This may look strange, but "unpack" is probably the
best word to describe what it does.  It just says, "Take whatever is in argv,
unpack it, and assign it to all of these variables on the left in order."

After that we just print them out like normal.


What You Should See
===================

When you run the
program run it like this:

.. code-block:: bash
    python ex13.py first 2nd 3rd

This is what you should see when you do a few different runs
with different parameters:

.. literalinclude:: ex/ex13.txt

You can actually replace "first", "2nd", and "3rd" with any three things.



Extra Credit
============

1. Try giving less than three parameters to your script.  See that error 
   you get?  See if you can explain it.
2. Write a script that has less parameters and one that has more.  Make
   sure you give the unpacked variables good names.
3. Combine ``raw_input`` with ``argv`` to make a script that does more
   input from a user.

