Exercise 10: What Was That?
***************************

In Exercise 9 I threw you some new stuff, just to keep you on your toes.  I
showed you two ways to make a string that goes across multiple lines.  In the
first way, I put the characters ``\n`` (back-slash ``n``) between the names of
the months.  What these two characters do is put a ``new line character`` into
the string at that point.

This use of the ``\`` (back-slash) character is a way we can put difficult-to-type
characters into a string.  There are plenty of these "escape sequences" available
for different characters you might want to put in, but there's a special one,
the ``double back-slash`` which is just two of them ``\\``.  These two characters
will print just one back-slash.  We'll try a few of these sequences so you can
see what I mean.

Another important escape sequence is to escape a single-quote ``'`` or
double-quote ``"``.  Imagine you have a string that uses double-quotes
and you want to put a double-quote in for the output.  If you do this ``"I "understand" joe."``
then Python will get confused since it will think the ``"`` around ``"understand"``
actually *ends* the string.  You need a way to tell Python that the ``"`` inside
the string isn't a *real* double-quote.

To solve this problem you *escape* double-quotes and single-quites so Python
knows to include in the string.  Here's an example:

.. code-block:: python

    "I am 6'2\" tall."  # escape double-quote inside string
    'I am 6\'2" tall.'  # escape single-quote inside string

The second way is by using triple-quotes, which is just ``"""`` and works
like a string, but does you also can put as many lines of text you as want
until you type ``"""`` again.  We'll also play with these.



.. literalinclude:: ex/ex10.py
    :linenos:


What You Should See
===================

Look for the tab characters that you made.  In this exercise the spacing is
important to get right.

.. literalinclude:: ex/ex10.txt


Extra Credit
============

1. Search online to see what other escape sequences are available.
2. Use ``'''`` (triple-single-quote) instead.  Can you see why you might use that instead of ``"""``?
3. Combine escape sequences and format strings to create a more complex format.
4. Remember the ``%r`` format?  Combine ``%r`` with double-quote and 
   single-quote escapes and print them out.  Compare %r with %s.  
   Notice how %r prints it the way you'd write it in your file, but 
   %s prints it the way you'd like to see it?


